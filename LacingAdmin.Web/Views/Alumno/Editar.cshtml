@model LacingAdmin.Model.Alumno

@{
    ViewBag.Title = "Editar Alumno";
}

<div class="form-horizontal">
    @Html.HiddenFor(model => model.IdAlumno)

    <div class="form-group">
        <label for="txtNombreUsuario" class="col-sm-auto control-label">Código</label>
        <div class="col-sm-10">
            @Html.EditorFor(
                model => model.NombreUsuario,
                new { htmlAttributes = new { @class = "form-control", @id = "txtNombreUsuario", @autocomplete="off" } })
            <span hidden id="spanNombreUsuario" class="spanVal"></span>
        </div>
    </div>

    <div class="form-group">
        <label for="txtContrasena" class="col-sm-auto control-label">Contraseña</label>
        <div class="col-sm-10">
            @Html.EditorFor(
                model => model.Contraseña,
                new { htmlAttributes = new { @class = "form-control", @id = "txtContrasena", @type = "password", @autocomplete="off" } })
            <span hidden id="spanContrasena1" class="spanVal"></span>
        </div>
    </div>

    <div class="form-group">
        <label for="txtContrasena2" class="col-sm-auto control-label">Repetir Contraseña</label>
        <div class="col-sm-10">
            @Html.EditorFor(
                model => model.Contraseña,
                new { htmlAttributes = new { @class = "form-control", @id = "txtContrasena2", @type = "password", @autocomplete="off" } })
            <span hidden id="spanContrasena" class="spanVal"></span>
        </div>
    </div>

    <div class="form-group">
        <label for="txtNombres" class="col-sm-auto control-label">Nombres</label>
        <div class="col-sm-10">
            @Html.EditorFor(
                model => model.Nombres,
                new { htmlAttributes = new { @class = "form-control", @id = "txtNombres", @autocomplete="off" } })
            <span hidden id="spanNombres" class="spanVal"></span>
        </div>
    </div>

    <div class="form-group">
        <label for="txtPaterno" class="col-sm-auto control-label">Paterno</label>
        <div class="col-sm-10">
            @Html.EditorFor(
                model => model.Paterno,
                new { htmlAttributes = new { @class = "form-control", @id = "txtPaterno", @autocomplete="off" } })
            <span hidden id="spanPaterno" class="spanVal"></span>
        </div>
    </div>

    <div class="form-group">
        <label for="txtMaterno" class="col-sm-auto control-label">Materno</label>
        <div class="col-sm-10">
            @Html.EditorFor(
                model => model.Materno,
                new { htmlAttributes = new { @class = "form-control", @id = "txtMaterno", @autocomplete="off" } })
            <span hidden id="spanMaterno" class="spanVal"></span>
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-offset-2 col-sm-10">
            <button onclick="postEditarAlumno()" class="btn btn-success">Guardar</button>
        </div>
    </div>
</div>

<script>
    var globalAlumno = {};

    $(document).ready(function () {
        globalAlumno.idAlumno = '@ViewBag.IdAlumno';
        @*globalAlumno.nombreUsuario = '@ViewBag.NombreUsuario';
        globalAlumno.contrasena = '@ViewBag.Contrasena';*@
        globalAlumno.nombreUsuario = '@Html.Raw((String)ViewBag.NombreUsuario)';
        globalAlumno.contrasena = '@Html.Raw((String)ViewBag.Contrasena)';
    });

    function validarCampos(alumno) {
        var contVal = 0;
        var contraseña2 = $("#txtContrasena2").val();

        if (alumno.NombreUsuario == "" || alumno.NombreUsuario == null) {
            lacing.helpers.ValidationFocus("txtNombreUsuario", "spanNombreUsuario", "El campo Código es requerido");
            contVal++;
        }
        else {
            lacing.helpers.RemoveValidationFocus("txtNombreUsuario", "spanNombreUsuario");

            if (lacing.helpers.RegexTest(alumno.NombreUsuario, lacing.regexHelper.RegexCodigoURP, "txtNombreUsuario", "spanNombreUsuario", "Ingrese un Código válido (9 caracteres numéricos)")) {
                contVal++;
            }
            else if (alumno.NombreUsuario != globalAlumno.nombreUsuario) {
                $.ajax({
                    type: "GET",
                    async: false,
                    url: "@Url.Action("ExisteNombreUsuario", "Alumno")",
                    data: {
                        nombreUsuario: alumno.NombreUsuario
                    },
                    success: (result) => {
                        if (result == "existe") {
                            lacing.helpers.ValidationFocus("txtNombreUsuario", "spanNombreUsuario", "El Código ingresado ya existe");
                            contVal++;
                        }
                        else {
                            lacing.helpers.RemoveValidationFocus("txtNombreUsuario", "spanNombreUsuario");
                        }
                    }
                });
            }
        }

        if (alumno.Contraseña == "" || alumno.Contraseña == null) {
            lacing.helpers.ValidationFocus("txtContrasena", "spanContrasena1", "El campo Contraseña es requerido");
            contVal++;
        }
        else {
            lacing.helpers.RemoveValidationFocus("txtContrasena", "spanContrasena1");
        }

        if (contraseña2 == "" || contraseña2 == null) {
            lacing.helpers.ValidationFocus("txtContrasena2", "spanContrasena", "El campo Repetir Contraseña es requerido");
            contVal++;
        }
        else {
            lacing.helpers.RemoveValidationFocus("txtContrasena2", "spanContrasena");

            if (contraseña2 != alumno.Contraseña) {
                lacing.helpers.ValidationFocus("txtContrasena2", "spanContrasena", "Las contraseñas deben coincidir");
                contVal++;
            }
            else {
                lacing.helpers.RemoveValidationFocus("txtContrasena2", "spanContrasena");
            }
        }

        if (alumno.Nombres == "" || alumno.Nombres == null) {
            lacing.helpers.ValidationFocus("txtNombres", "spanNombres", "El campo Nombres es requerido");
            contVal++;
        }
        else {
            lacing.helpers.RemoveValidationFocus("txtNombres", "spanNombres");

            if (lacing.helpers.RegexTest(alumno.Nombres, lacing.regexHelper.RegexSoloLetras, "txtNombres", "spanNombres", "Solo se puede ingresar letras")) contVal++;
        }

        if (alumno.Paterno == "" || alumno.Paterno == null) {
            lacing.helpers.ValidationFocus("txtPaterno", "spanPaterno", "El campo Paterno es requerido");
            contVal++;
        }
        else {
            lacing.helpers.RemoveValidationFocus("txtPaterno", "spanPaterno");

            if (lacing.helpers.RegexTest(alumno.Paterno, lacing.regexHelper.RegexSoloLetras, "txtPaterno", "spanPaterno", "Solo se puede ingresar letras")) contVal++;
        }

        if (lacing.helpers.RegexTest(alumno.Materno, lacing.regexHelper.RegexSoloLetras, "txtMaterno", "spanMaterno", "Solo se puede ingresar letras")) contVal++;

        return contVal;
    }

    function postEditarAlumno() {
        var alumno = {
            IdAlumno: globalAlumno.idAlumno,
            NombreUsuario: $("#txtNombreUsuario").val(),
            Contraseña: $("#txtContrasena").val(),
            Nombres: $("#txtNombres").val(),
            Paterno: $("#txtPaterno").val(),
            Materno: $("#txtMaterno").val()
        };

        if (validarCampos(alumno) == 0) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("Editar", "Alumno")",
                data: {
                    "alumno": alumno
                },
                beforeSend: function () {
                    lacing.helpers.CloseModal('EditarAlumnoPopup');
                    onBeginRequest();
                },
                success: function (result) {
                    onCompleteRequest();
                    refreshListaEditar();
                    window.location.href = "/Alumno";
                },
                error: (error) => {
                    Swal.fire(
                        '¡Error!',
                        'No se pudo editar al Alumno',
                        'error'
                    );
                    onCompleteRequest();
                }
            });
        }
    }

    function refreshListaEditar() {
        Swal.fire(
            '¡Listo!',
            'El Alumno ha sido editado exitosamente.',
            'success'
        );
        $.ajax({
            type: "GET",
            url: "@Url.Action("ListaAlumnosView", "Alumno", new { Area = ""})",
            beforeSend: function () {
                onBeginRequest();
            },
            success: function (result) {
                onCompleteRequest();
                $("#listadoAlumnos").html(result)
            },
            error: function (error) {
                Swal.fire(
                    '¡Error!',
                    'No se pudo actualizar listado de Alumnos, error: ' + error,
                    'error'
                );
                onCompleteRequest();
            }
        });
    }
</script>


